# -*- coding: utf-8 -*-
"""tumour.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bgKSwjtiQecEBk7zWbtH_Qmw0KiYUM_a
"""

import streamlit as st
import numpy as np
import cv2
import tensorflow as tf
import pandas as pd
from tensorflow.keras.models import load_model
from PIL import Image

# Define constants
IMAGE_SIZE = 150
LABELS = ['glioma_tumor', 'no_tumor', 'meningioma_tumor', 'pituitary_tumor']

# Load the pre-trained models
@st.cache_resource
def load_models():
    model_B0 = load_model('EfficientNetB0.h5')
    model_B3 = load_model('EfficientNetB3.h5')
    return model_B0, model_B3

model_B0, model_B3 = load_models()

# Define function to preprocess the image for prediction
def preprocess_image(image):
    image = cv2.resize(image, (IMAGE_SIZE, IMAGE_SIZE))
    image = image.astype('float32') / 255.0
    image = np.expand_dims(image, axis=0) # Add batch dimension
    return image



# Streamlit App
st.title("Brain Tumor Detection using Deep Learning")
st.write("Upload an MRI image to classify it as glioma, no tumor, meningioma, or pituitary tumor.")

# File upload
uploaded_file = st.file_uploader("Choose an MRI image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Display uploaded image
    st.image(uploaded_file, caption="Uploaded MRI Image", use_column_width=True)
    image = np.array(Image.open(uploaded_file).convert("RGB"))

    # Preprocess the image
    processed_image = preprocess_image(image)

    # Make predictions using both models
    st.write("## Predictions")
    for model, name in zip([model_B0, model_B3], ["EfficientNetB0", "EfficientNetB3"]):
        prediction = model.predict(processed_image)
        predicted_class = LABELS[np.argmax(prediction)]
        confidence = np.max(prediction) * 100

        st.write(f"**Model {name}:**")
        st.write(f"Predicted Tumor Type: {predicted_class}")
        st.write(f"Confidence: {confidence:.2f}%")

        # Display bar chart for confidence of each class
        st.bar_chart(pd.DataFrame(prediction, columns=LABELS).T)

st.write("Note: This is a basic demonstration. Model performance may vary depending on training data quality and hyperparameters.")

